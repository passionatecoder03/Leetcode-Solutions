class Solution {
    vector<int>  x;
    vector<int>  ret;
    vector<int>  ret1;
    int flag=0;
    void dfs(TreeNode* tp, int p)
    {
                x.push_back(tp->val);
                cout<<tp->val<<endl;
                if(tp->val==p)
                {
                    ret=x;
                    flag=1;
                    cout<<"in"<<endl;
                    return ;
                }
                if(tp->left!=NULL)
                    dfs(tp->left,p);
                if(tp->right!=NULL&&flag!=1)
                    dfs(tp->right,p);
                x.pop_back();
     }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(root==NULL) return root;
        
        if(p!=NULL)
            dfs(root,p->val);
        
        ret1=ret;
        ret.clear();
        x.clear();
        flag=0;
        if(q!=NULL)
            dfs(root,q->val);

        TreeNode* soll= new TreeNode(-1);
        for(int i=0;i<min(ret.size(),ret1.size());i++)
        {
            if(ret[i]==ret1[i])
            {
                soll->val=ret[i];
            }
            else
            {
                break;
            }
        }
        
        if(soll->val==-1)
        {
            if(p==NULL)
                soll->val = ret[ret.size()-1];
            if(q==NULL)
                soll->val = ret1[ret1.size()-1];
        }
        return soll;
    }
};
