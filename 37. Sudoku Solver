class Solution {

int unassign(vector<vector<char> > &a,int &row,int &col)
{
	int i,j,n=a.size(),flag=0;
	for(i=row;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(a[i][j]=='.')
			{
				row=i;
				col=j;
				flag=1;
                return 0;
				break;
			}
		}
		if(flag==1)
			break;
	}
    return 1;
}
int issafe(vector<vector<char> > &a,int row,int col,int num,int n)
{
	int i,j;
	//col
	for(i=0;i<n;i++)
		if(a[i][col]==num+'0')
			return 0;
    
	//row
	for(i=0;i<n;i++)
		if(a[row][i]==num +'0')
			return 0;
	
	//block
	int trow=0,tcol=0;
	if(row==0)
		trow=0;
	else
		trow=(row/3)*3;
    
	if(col==0)
		tcol=0;
	else
		tcol=(col/3)*3;
        
	for(i=trow;i<trow+3;i++)
		for(j=tcol;j<tcol+3;j++)
			if(a[i][j]==num+'0')
				return 0;
	return 1;
}
int solve(int row,int col,vector<vector<char> > &a)
{
	int n =a.size();
    // the next empty space is given by unassign(a,row,col) fun ;
	if(unassign(a,row,col))
		return 1;
    
	for(int num=1;num<=9;num++)
	{
        //issafe gives us that the row and col and block are safe for insertion or not
		if(issafe(a,row,col,num,n))
		{
            //if this is safe place a(row/col) for (0-9 any number) we enter
			a[row][col]=num+'0';
			///////////////cout<<"row and col "<<row<<" "<<col<<" "<<num<<endl;
            // we search here for next empty space recursively 
			if(solve(row,col+1,a))
				return 1;
            // if the above solution (row/col) not give us valid solution we backtrack;
			///////////////cout<<"removed row and col "<<row<<" "<<col<<" "<<num<<endl;
			a[row][col]='.';
		}
	}
	return 0;
}
public:
    void solveSudoku(vector<vector<char>>& a) {
        int i,j,n=a.size();
        if(!solve(0,0,a))
        {
            cout<<"NO sol EXist"<<endl;
        }
    }
};
