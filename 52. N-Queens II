class Solution {
int cnt=0;
    
int call(int r,int c,int n, vector<vector<char> > &queen )
{
	for(int i=0;i<r;i++)
		if(queen[i][c]=='q')
			return 0;
	// diagonal  \ wala
	for(int i=r,j=c;i>=0&&j>=0;i--,j--)
	{
		if(queen[i][j]=='q')
			return 0;
	}
	// diagonal  / wala
	for(int i=r,j=c;i>=0&&j<n ;i--,j++)
	{
		if(queen[i][j]=='q')
			return 0;
	}	
		
	return 1;
}
    
void queenfun(int r , vector<vector<char> > &queen , int n)
{
	if(r==n)
	{
		cnt++;
		return ;
	}
	for(int i=0;i<n;i++)
	{
		//cout<<"r= "<<r<<" "<<i<<endl;
		if(call(r,i,n,queen))
		{
			queen[r][i] = 'q';
			queenfun(r+1,queen,n);
			queen[r][i] = '-';
			//cout<<"out"<<endl;
		}
	}
}


public:
    int totalNQueens(int n) 
    {
        cout<<"start"<<endl;
        vector<vector<char> > queen(n,vector<char>(n,'-'));

        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                queen[i][j]='-';

        queenfun(0,queen,n);
        return cnt;
    }
};
